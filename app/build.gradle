plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // Add these
    id 'kotlin-kapt' // Or id 'com.google.devtools.ksp' if you're using KSP
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'com.aca.people'
    compileSdk 35

    defaultConfig {
        applicationId "com.aca.people"
        minSdk 25
        targetSdk project.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion project.kotlinCompilerExtensionVersion
    }

}



dependencies {
    // ... other dependencies

    // Hilt Dependencies
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation 'androidx.compose.foundation:foundation-android:1.8.2' // It seems you have an explicit version here, consider using BOM for Compose
    implementation 'androidx.compose.material3:material3-android:1.3.2'
    implementation 'androidx.navigation:navigation-runtime-android:2.9.0'// Same as above
    kapt "com.google.dagger:hilt-compiler:$hiltVersion" // Or ksp for KSP

    // Gson
    implementation 'com.google.code.gson:gson:2.11.0' // Or the latest version

    // Your Retrofit dependencies (ensure converter-gson is here)
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion" // This transitively includes gson

    // OkHttp Logging Interceptor - THIS IS THE FIX
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion" // Make sure pagingVersion is defined in your project's build.gradle ext block

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    //noinspection KaptUsageInsteadOfKsp
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion" // If you are using Moshi's code generation for adapters

    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"
    implementation "androidx.paging:paging-runtime:$pagingVersion" // You have this one too
    testImplementation "androidx.paging:paging-common:$pagingVersion"
    implementation "androidx.paging:paging-compose:3.2.1" // Note: paging-compose is on a different version cycle. 3.2.1 is fine.


    implementation "io.coil-kt:coil-compose:2.4.0"

    implementation("androidx.navigation:navigation-compose:$navigationVersion")

    // Compose UI Tooling for @Preview
    // If using Compose BOM:
    implementation(platform("androidx.compose:compose-bom:2024.05.00")) // Make sure this is present if relying on BOM
    implementation("androidx.compose.ui:ui-tooling-preview")
    debugImplementation("androidx.compose.ui:ui-tooling")
    // OR if specifying versions directly (less recommended if BOM is used elsewhere):
    // implementation("androidx.compose.ui:ui-tooling-preview:1.6.7") // Example version
    // debugImplementation("androidx.compose.ui:ui-tooling:1.6.7")    // Example version

    // Hilt Integration with Navigation Compose
    implementation("androidx.hilt:hilt-navigation-compose:1.2.0") // Use your defined hiltNavigationComposeVersion or latest

    // Your other Hilt dependencies (you already have these)
    implementation("com.google.dagger:hilt-android:$hiltVersion")
    kapt("com.google.dagger:hilt-compiler:$hiltVersion") // Or ksp if you're using KSP
}
